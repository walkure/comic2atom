// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: ComicFuz.protoc

package siteloader

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceInfo_DeviceType int32

const (
	DeviceInfo_IOS     DeviceInfo_DeviceType = 0
	DeviceInfo_ANDROID DeviceInfo_DeviceType = 1
	DeviceInfo_BROWSER DeviceInfo_DeviceType = 2
)

// Enum value maps for DeviceInfo_DeviceType.
var (
	DeviceInfo_DeviceType_name = map[int32]string{
		0: "IOS",
		1: "ANDROID",
		2: "BROWSER",
	}
	DeviceInfo_DeviceType_value = map[string]int32{
		"IOS":     0,
		"ANDROID": 1,
		"BROWSER": 2,
	}
)

func (x DeviceInfo_DeviceType) Enum() *DeviceInfo_DeviceType {
	p := new(DeviceInfo_DeviceType)
	*p = x
	return p
}

func (x DeviceInfo_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_ComicFuz_protoc_enumTypes[0].Descriptor()
}

func (DeviceInfo_DeviceType) Type() protoreflect.EnumType {
	return &file_ComicFuz_protoc_enumTypes[0]
}

func (x DeviceInfo_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceInfo_DeviceType.Descriptor instead.
func (DeviceInfo_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{0, 0}
}

type Manga_Badge int32

const (
	Manga_NONE   Manga_Badge = 0
	Manga_NEW    Manga_Badge = 1
	Manga_UPDATE Manga_Badge = 2
)

// Enum value maps for Manga_Badge.
var (
	Manga_Badge_name = map[int32]string{
		0: "NONE",
		1: "NEW",
		2: "UPDATE",
	}
	Manga_Badge_value = map[string]int32{
		"NONE":   0,
		"NEW":    1,
		"UPDATE": 2,
	}
)

func (x Manga_Badge) Enum() *Manga_Badge {
	p := new(Manga_Badge)
	*p = x
	return p
}

func (x Manga_Badge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Manga_Badge) Descriptor() protoreflect.EnumDescriptor {
	return file_ComicFuz_protoc_enumTypes[1].Descriptor()
}

func (Manga_Badge) Type() protoreflect.EnumType {
	return &file_ComicFuz_protoc_enumTypes[1]
}

func (x Manga_Badge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Manga_Badge.Descriptor instead.
func (Manga_Badge) EnumDescriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{3, 0}
}

type Chapter_Badge int32

const (
	Chapter_NONE    Chapter_Badge = 0
	Chapter_UPDATE  Chapter_Badge = 1
	Chapter_ADVANCE Chapter_Badge = 2
	Chapter_SPECIAL Chapter_Badge = 3
)

// Enum value maps for Chapter_Badge.
var (
	Chapter_Badge_name = map[int32]string{
		0: "NONE",
		1: "UPDATE",
		2: "ADVANCE",
		3: "SPECIAL",
	}
	Chapter_Badge_value = map[string]int32{
		"NONE":    0,
		"UPDATE":  1,
		"ADVANCE": 2,
		"SPECIAL": 3,
	}
)

func (x Chapter_Badge) Enum() *Chapter_Badge {
	p := new(Chapter_Badge)
	*p = x
	return p
}

func (x Chapter_Badge) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chapter_Badge) Descriptor() protoreflect.EnumDescriptor {
	return file_ComicFuz_protoc_enumTypes[2].Descriptor()
}

func (Chapter_Badge) Type() protoreflect.EnumType {
	return &file_ComicFuz_protoc_enumTypes[2]
}

func (x Chapter_Badge) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chapter_Badge.Descriptor instead.
func (Chapter_Badge) EnumDescriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{6, 0}
}

type Chapter_PointConsumption_Type int32

const (
	Chapter_PointConsumption_ANY_ITEMS     Chapter_PointConsumption_Type = 0
	Chapter_PointConsumption_EVENT_OR_PAID Chapter_PointConsumption_Type = 1
	Chapter_PointConsumption_PAID_ONLY     Chapter_PointConsumption_Type = 2
)

// Enum value maps for Chapter_PointConsumption_Type.
var (
	Chapter_PointConsumption_Type_name = map[int32]string{
		0: "ANY_ITEMS",
		1: "EVENT_OR_PAID",
		2: "PAID_ONLY",
	}
	Chapter_PointConsumption_Type_value = map[string]int32{
		"ANY_ITEMS":     0,
		"EVENT_OR_PAID": 1,
		"PAID_ONLY":     2,
	}
)

func (x Chapter_PointConsumption_Type) Enum() *Chapter_PointConsumption_Type {
	p := new(Chapter_PointConsumption_Type)
	*p = x
	return p
}

func (x Chapter_PointConsumption_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chapter_PointConsumption_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ComicFuz_protoc_enumTypes[3].Descriptor()
}

func (Chapter_PointConsumption_Type) Type() protoreflect.EnumType {
	return &file_ComicFuz_protoc_enumTypes[3]
}

func (x Chapter_PointConsumption_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chapter_PointConsumption_Type.Descriptor instead.
func (Chapter_PointConsumption_Type) EnumDescriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{6, 0, 0}
}

// request
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType DeviceInfo_DeviceType `protobuf:"varint,3,opt,name=deviceType,proto3,enum=ComicFuz.DeviceInfo_DeviceType" json:"deviceType,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{0}
}

func (x *DeviceInfo) GetDeviceType() DeviceInfo_DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceInfo_IOS
}

type MangaDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfo *DeviceInfo `protobuf:"bytes,1,opt,name=deviceInfo,proto3,oneof" json:"deviceInfo,omitempty"`
	MangaId    *uint32     `protobuf:"varint,2,opt,name=mangaId,proto3,oneof" json:"mangaId,omitempty"`
}

func (x *MangaDetailRequest) Reset() {
	*x = MangaDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailRequest) ProtoMessage() {}

func (x *MangaDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailRequest.ProtoReflect.Descriptor instead.
func (*MangaDetailRequest) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{1}
}

func (x *MangaDetailRequest) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *MangaDetailRequest) GetMangaId() uint32 {
	if x != nil && x.MangaId != nil {
		return *x.MangaId
	}
	return 0
}

// response
type MangaDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserPoint        *MangaDetailResponse_UserPoint  `protobuf:"bytes,1,opt,name=userPoint,proto3" json:"userPoint,omitempty"`
	Manga            *Manga                          `protobuf:"bytes,2,opt,name=manga,proto3" json:"manga,omitempty"`
	Chapters         []*ChapterGroup                 `protobuf:"bytes,3,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Authorship       []*Authorship                   `protobuf:"bytes,4,rep,name=authorship,proto3" json:"authorship,omitempty"`
	NextUpdateInfo   string                          `protobuf:"bytes,5,opt,name=nextUpdateInfo,proto3" json:"nextUpdateInfo,omitempty"`
	IsFavorite       bool                            `protobuf:"varint,6,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
	Tags             []*MangaDetailResponse_Tag      `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	Sns              *MangaDetailResponse_Sns        `protobuf:"bytes,8,opt,name=sns,proto3" json:"sns,omitempty"`
	ViewButton       *MangaDetailResponse_ViewButton `protobuf:"bytes,9,opt,name=viewButton,proto3" json:"viewButton,omitempty"`
	IsCommentEnabled bool                            `protobuf:"varint,10,opt,name=isCommentEnabled,proto3" json:"isCommentEnabled,omitempty"`
	RewardUrl        string                          `protobuf:"bytes,11,opt,name=rewardUrl,proto3" json:"rewardUrl,omitempty"`
}

func (x *MangaDetailResponse) Reset() {
	*x = MangaDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailResponse) ProtoMessage() {}

func (x *MangaDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailResponse.ProtoReflect.Descriptor instead.
func (*MangaDetailResponse) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{2}
}

func (x *MangaDetailResponse) GetUserPoint() *MangaDetailResponse_UserPoint {
	if x != nil {
		return x.UserPoint
	}
	return nil
}

func (x *MangaDetailResponse) GetManga() *Manga {
	if x != nil {
		return x.Manga
	}
	return nil
}

func (x *MangaDetailResponse) GetChapters() []*ChapterGroup {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *MangaDetailResponse) GetAuthorship() []*Authorship {
	if x != nil {
		return x.Authorship
	}
	return nil
}

func (x *MangaDetailResponse) GetNextUpdateInfo() string {
	if x != nil {
		return x.NextUpdateInfo
	}
	return ""
}

func (x *MangaDetailResponse) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

func (x *MangaDetailResponse) GetTags() []*MangaDetailResponse_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MangaDetailResponse) GetSns() *MangaDetailResponse_Sns {
	if x != nil {
		return x.Sns
	}
	return nil
}

func (x *MangaDetailResponse) GetViewButton() *MangaDetailResponse_ViewButton {
	if x != nil {
		return x.ViewButton
	}
	return nil
}

func (x *MangaDetailResponse) GetIsCommentEnabled() bool {
	if x != nil {
		return x.IsCommentEnabled
	}
	return false
}

func (x *MangaDetailResponse) GetRewardUrl() string {
	if x != nil {
		return x.RewardUrl
	}
	return ""
}

type Manga struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MangaId                   uint32      `protobuf:"varint,1,opt,name=mangaId,proto3" json:"mangaId,omitempty"`
	MangaName                 string      `protobuf:"bytes,2,opt,name=mangaName,proto3" json:"mangaName,omitempty"`
	MangaNameKana             string      `protobuf:"bytes,3,opt,name=mangaNameKana,proto3" json:"mangaNameKana,omitempty"`
	MainThumbnailUrl          string      `protobuf:"bytes,4,opt,name=mainThumbnailUrl,proto3" json:"mainThumbnailUrl,omitempty"`
	SingleListThumbnailUrl    string      `protobuf:"bytes,5,opt,name=singleListThumbnailUrl,proto3" json:"singleListThumbnailUrl,omitempty"`
	ShortDescription          string      `protobuf:"bytes,6,opt,name=shortDescription,proto3" json:"shortDescription,omitempty"`
	Campaign                  string      `protobuf:"bytes,7,opt,name=campaign,proto3" json:"campaign,omitempty"`
	NumberOfTotalChapterLikes uint32      `protobuf:"varint,8,opt,name=numberOfTotalChapterLikes,proto3" json:"numberOfTotalChapterLikes,omitempty"`
	NumberOfFavorites         uint32      `protobuf:"varint,9,opt,name=numberOfFavorites,proto3" json:"numberOfFavorites,omitempty"`
	Badge                     Manga_Badge `protobuf:"varint,10,opt,name=badge,proto3,enum=ComicFuz.Manga_Badge" json:"badge,omitempty"`
	IsTicketAvailable         bool        `protobuf:"varint,12,opt,name=isTicketAvailable,proto3" json:"isTicketAvailable,omitempty"`
	IsChargeNeeded            bool        `protobuf:"varint,13,opt,name=isChargeNeeded,proto3" json:"isChargeNeeded,omitempty"`
	LongDescription           string      `protobuf:"bytes,14,opt,name=longDescription,proto3" json:"longDescription,omitempty"`
	LatestUpdatedDate         string      `protobuf:"bytes,15,opt,name=latestUpdatedDate,proto3" json:"latestUpdatedDate,omitempty"`
	IsFavorite                bool        `protobuf:"varint,16,opt,name=isFavorite,proto3" json:"isFavorite,omitempty"`
}

func (x *Manga) Reset() {
	*x = Manga{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manga) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manga) ProtoMessage() {}

func (x *Manga) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manga.ProtoReflect.Descriptor instead.
func (*Manga) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{3}
}

func (x *Manga) GetMangaId() uint32 {
	if x != nil {
		return x.MangaId
	}
	return 0
}

func (x *Manga) GetMangaName() string {
	if x != nil {
		return x.MangaName
	}
	return ""
}

func (x *Manga) GetMangaNameKana() string {
	if x != nil {
		return x.MangaNameKana
	}
	return ""
}

func (x *Manga) GetMainThumbnailUrl() string {
	if x != nil {
		return x.MainThumbnailUrl
	}
	return ""
}

func (x *Manga) GetSingleListThumbnailUrl() string {
	if x != nil {
		return x.SingleListThumbnailUrl
	}
	return ""
}

func (x *Manga) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

func (x *Manga) GetCampaign() string {
	if x != nil {
		return x.Campaign
	}
	return ""
}

func (x *Manga) GetNumberOfTotalChapterLikes() uint32 {
	if x != nil {
		return x.NumberOfTotalChapterLikes
	}
	return 0
}

func (x *Manga) GetNumberOfFavorites() uint32 {
	if x != nil {
		return x.NumberOfFavorites
	}
	return 0
}

func (x *Manga) GetBadge() Manga_Badge {
	if x != nil {
		return x.Badge
	}
	return Manga_NONE
}

func (x *Manga) GetIsTicketAvailable() bool {
	if x != nil {
		return x.IsTicketAvailable
	}
	return false
}

func (x *Manga) GetIsChargeNeeded() bool {
	if x != nil {
		return x.IsChargeNeeded
	}
	return false
}

func (x *Manga) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *Manga) GetLatestUpdatedDate() string {
	if x != nil {
		return x.LatestUpdatedDate
	}
	return ""
}

func (x *Manga) GetIsFavorite() bool {
	if x != nil {
		return x.IsFavorite
	}
	return false
}

type Authorship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author []*Authorship_Author `protobuf:"bytes,1,rep,name=author,proto3" json:"author,omitempty"`
	Role   string               `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *Authorship) Reset() {
	*x = Authorship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorship) ProtoMessage() {}

func (x *Authorship) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorship.ProtoReflect.Descriptor instead.
func (*Authorship) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{4}
}

func (x *Authorship) GetAuthor() []*Authorship_Author {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Authorship) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChapterGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookIssueHeader *ChapterGroup_BookIssueHeader `protobuf:"bytes,1,opt,name=bookIssueHeader,proto3" json:"bookIssueHeader,omitempty"`
	Chapters        []*Chapter                    `protobuf:"bytes,2,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (x *ChapterGroup) Reset() {
	*x = ChapterGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterGroup) ProtoMessage() {}

func (x *ChapterGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterGroup.ProtoReflect.Descriptor instead.
func (*ChapterGroup) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{5}
}

func (x *ChapterGroup) GetBookIssueHeader() *ChapterGroup_BookIssueHeader {
	if x != nil {
		return x.BookIssueHeader
	}
	return nil
}

func (x *ChapterGroup) GetChapters() []*Chapter {
	if x != nil {
		return x.Chapters
	}
	return nil
}

type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChapterId         uint32                    `protobuf:"varint,1,opt,name=chapterId,proto3" json:"chapterId,omitempty"`
	ChapterMainName   string                    `protobuf:"bytes,2,opt,name=chapterMainName,proto3" json:"chapterMainName,omitempty"`
	ChapterSubName    string                    `protobuf:"bytes,3,opt,name=chapterSubName,proto3" json:"chapterSubName,omitempty"`
	ThumbnailUrl      string                    `protobuf:"bytes,4,opt,name=thumbnailUrl,proto3" json:"thumbnailUrl,omitempty"`
	PointConsumption  *Chapter_PointConsumption `protobuf:"bytes,5,opt,name=pointConsumption,proto3" json:"pointConsumption,omitempty"`
	NumberOfComments  uint32                    `protobuf:"varint,6,opt,name=numberOfComments,proto3" json:"numberOfComments,omitempty"`
	NumberOfLikes     uint32                    `protobuf:"varint,7,opt,name=numberOfLikes,proto3" json:"numberOfLikes,omitempty"`
	UpdatedDate       string                    `protobuf:"bytes,8,opt,name=updatedDate,proto3" json:"updatedDate,omitempty"`
	IsRead            bool                      `protobuf:"varint,9,opt,name=isRead,proto3" json:"isRead,omitempty"`
	EndOfRentalPeriod string                    `protobuf:"bytes,10,opt,name=endOfRentalPeriod,proto3" json:"endOfRentalPeriod,omitempty"`
	FirstPageImageUrl string                    `protobuf:"bytes,11,opt,name=firstPageImageUrl,proto3" json:"firstPageImageUrl,omitempty"`
	Badge             Chapter_Badge             `protobuf:"varint,12,opt,name=badge,proto3,enum=ComicFuz.Chapter_Badge" json:"badge,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{6}
}

func (x *Chapter) GetChapterId() uint32 {
	if x != nil {
		return x.ChapterId
	}
	return 0
}

func (x *Chapter) GetChapterMainName() string {
	if x != nil {
		return x.ChapterMainName
	}
	return ""
}

func (x *Chapter) GetChapterSubName() string {
	if x != nil {
		return x.ChapterSubName
	}
	return ""
}

func (x *Chapter) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *Chapter) GetPointConsumption() *Chapter_PointConsumption {
	if x != nil {
		return x.PointConsumption
	}
	return nil
}

func (x *Chapter) GetNumberOfComments() uint32 {
	if x != nil {
		return x.NumberOfComments
	}
	return 0
}

func (x *Chapter) GetNumberOfLikes() uint32 {
	if x != nil {
		return x.NumberOfLikes
	}
	return 0
}

func (x *Chapter) GetUpdatedDate() string {
	if x != nil {
		return x.UpdatedDate
	}
	return ""
}

func (x *Chapter) GetIsRead() bool {
	if x != nil {
		return x.IsRead
	}
	return false
}

func (x *Chapter) GetEndOfRentalPeriod() string {
	if x != nil {
		return x.EndOfRentalPeriod
	}
	return ""
}

func (x *Chapter) GetFirstPageImageUrl() string {
	if x != nil {
		return x.FirstPageImageUrl
	}
	return ""
}

func (x *Chapter) GetBadge() Chapter_Badge {
	if x != nil {
		return x.Badge
	}
	return Chapter_NONE
}

type MangaDetailResponse_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MangaDetailResponse_Tag) Reset() {
	*x = MangaDetailResponse_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailResponse_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailResponse_Tag) ProtoMessage() {}

func (x *MangaDetailResponse_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailResponse_Tag.ProtoReflect.Descriptor instead.
func (*MangaDetailResponse_Tag) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{2, 0}
}

func (x *MangaDetailResponse_Tag) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MangaDetailResponse_Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MangaDetailResponse_Sns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *MangaDetailResponse_Sns) Reset() {
	*x = MangaDetailResponse_Sns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailResponse_Sns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailResponse_Sns) ProtoMessage() {}

func (x *MangaDetailResponse_Sns) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailResponse_Sns.ProtoReflect.Descriptor instead.
func (*MangaDetailResponse_Sns) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{2, 1}
}

func (x *MangaDetailResponse_Sns) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *MangaDetailResponse_Sns) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MangaDetailResponse_UserPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event uint32 `protobuf:"varint,1,opt,name=event,proto3" json:"event,omitempty"`
	Paid  uint32 `protobuf:"varint,2,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (x *MangaDetailResponse_UserPoint) Reset() {
	*x = MangaDetailResponse_UserPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailResponse_UserPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailResponse_UserPoint) ProtoMessage() {}

func (x *MangaDetailResponse_UserPoint) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailResponse_UserPoint.ProtoReflect.Descriptor instead.
func (*MangaDetailResponse_UserPoint) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{2, 2}
}

func (x *MangaDetailResponse_UserPoint) GetEvent() uint32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *MangaDetailResponse_UserPoint) GetPaid() uint32 {
	if x != nil {
		return x.Paid
	}
	return 0
}

type MangaDetailResponse_ViewButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapter     *Chapter `protobuf:"bytes,1,opt,name=chapter,proto3" json:"chapter,omitempty"`
	ButtonTitle string   `protobuf:"bytes,2,opt,name=buttonTitle,proto3" json:"buttonTitle,omitempty"`
}

func (x *MangaDetailResponse_ViewButton) Reset() {
	*x = MangaDetailResponse_ViewButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MangaDetailResponse_ViewButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MangaDetailResponse_ViewButton) ProtoMessage() {}

func (x *MangaDetailResponse_ViewButton) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MangaDetailResponse_ViewButton.ProtoReflect.Descriptor instead.
func (*MangaDetailResponse_ViewButton) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{2, 3}
}

func (x *MangaDetailResponse_ViewButton) GetChapter() *Chapter {
	if x != nil {
		return x.Chapter
	}
	return nil
}

func (x *MangaDetailResponse_ViewButton) GetButtonTitle() string {
	if x != nil {
		return x.ButtonTitle
	}
	return ""
}

type Authorship_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorId           uint32 `protobuf:"varint,1,opt,name=authorId,proto3" json:"authorId,omitempty"`
	AuthorName         string `protobuf:"bytes,2,opt,name=authorName,proto3" json:"authorName,omitempty"`
	AuthorNameKana     string `protobuf:"bytes,3,opt,name=authorNameKana,proto3" json:"authorNameKana,omitempty"`
	ImageUrl           string `protobuf:"bytes,4,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	IsYellEnabled      bool   `protobuf:"varint,5,opt,name=isYellEnabled,proto3" json:"isYellEnabled,omitempty"`
	IsYellBonusOffered bool   `protobuf:"varint,6,opt,name=isYellBonusOffered,proto3" json:"isYellBonusOffered,omitempty"`
}

func (x *Authorship_Author) Reset() {
	*x = Authorship_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorship_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorship_Author) ProtoMessage() {}

func (x *Authorship_Author) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorship_Author.ProtoReflect.Descriptor instead.
func (*Authorship_Author) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{4, 0}
}

func (x *Authorship_Author) GetAuthorId() uint32 {
	if x != nil {
		return x.AuthorId
	}
	return 0
}

func (x *Authorship_Author) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *Authorship_Author) GetAuthorNameKana() string {
	if x != nil {
		return x.AuthorNameKana
	}
	return ""
}

func (x *Authorship_Author) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Authorship_Author) GetIsYellEnabled() bool {
	if x != nil {
		return x.IsYellEnabled
	}
	return false
}

func (x *Authorship_Author) GetIsYellBonusOffered() bool {
	if x != nil {
		return x.IsYellBonusOffered
	}
	return false
}

type ChapterGroup_BookIssueHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookIssueId    string `protobuf:"bytes,1,opt,name=bookIssueId,proto3" json:"bookIssueId,omitempty"`
	HeaderImageUrl string `protobuf:"bytes,2,opt,name=headerImageUrl,proto3" json:"headerImageUrl,omitempty"`
	Text           string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	PublishedDate  string `protobuf:"bytes,4,opt,name=publishedDate,proto3" json:"publishedDate,omitempty"`
	Campaign       string `protobuf:"bytes,5,opt,name=campaign,proto3" json:"campaign,omitempty"`
}

func (x *ChapterGroup_BookIssueHeader) Reset() {
	*x = ChapterGroup_BookIssueHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterGroup_BookIssueHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterGroup_BookIssueHeader) ProtoMessage() {}

func (x *ChapterGroup_BookIssueHeader) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterGroup_BookIssueHeader.ProtoReflect.Descriptor instead.
func (*ChapterGroup_BookIssueHeader) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{5, 0}
}

func (x *ChapterGroup_BookIssueHeader) GetBookIssueId() string {
	if x != nil {
		return x.BookIssueId
	}
	return ""
}

func (x *ChapterGroup_BookIssueHeader) GetHeaderImageUrl() string {
	if x != nil {
		return x.HeaderImageUrl
	}
	return ""
}

func (x *ChapterGroup_BookIssueHeader) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChapterGroup_BookIssueHeader) GetPublishedDate() string {
	if x != nil {
		return x.PublishedDate
	}
	return ""
}

func (x *ChapterGroup_BookIssueHeader) GetCampaign() string {
	if x != nil {
		return x.Campaign
	}
	return ""
}

type Chapter_PointConsumption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Chapter_PointConsumption_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ComicFuz.Chapter_PointConsumption_Type" json:"type,omitempty"`
	Amount uint32                        `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Chapter_PointConsumption) Reset() {
	*x = Chapter_PointConsumption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ComicFuz_protoc_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter_PointConsumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter_PointConsumption) ProtoMessage() {}

func (x *Chapter_PointConsumption) ProtoReflect() protoreflect.Message {
	mi := &file_ComicFuz_protoc_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter_PointConsumption.ProtoReflect.Descriptor instead.
func (*Chapter_PointConsumption) Descriptor() ([]byte, []int) {
	return file_ComicFuz_protoc_rawDescGZIP(), []int{6, 0}
}

func (x *Chapter_PointConsumption) GetType() Chapter_PointConsumption_Type {
	if x != nil {
		return x.Type
	}
	return Chapter_PointConsumption_ANY_ITEMS
}

func (x *Chapter_PointConsumption) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

var File_ComicFuz_protoc protoreflect.FileDescriptor

var file_ComicFuz_protoc_rawDesc = []byte{
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x12, 0x08, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x22, 0x7e, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x12,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75,
	0x7a, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x07, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6d, 0x61, 0x6e, 0x67, 0x61, 0x49, 0x64, 0x22, 0xa1, 0x06, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x67,
	0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x4d, 0x61,
	0x6e, 0x67, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a,
	0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x52, 0x05, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x4d,
	0x61, 0x6e, 0x67, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x6e, 0x73, 0x52, 0x03, 0x73, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x76,
	0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x55, 0x72, 0x6c, 0x1a,
	0x29, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2b, 0x0a, 0x03, 0x53, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x35, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x1a, 0x5b,
	0x0a, 0x0a, 0x56, 0x69, 0x65, 0x77, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa0, 0x05, 0x0a, 0x05,
	0x4d, 0x61, 0x6e, 0x67, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x61, 0x6e, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x67, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4b,
	0x61, 0x6e, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x36, 0x0a, 0x16, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12,
	0x3c, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x43, 0x6f, 0x6d,
	0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x4d, 0x61, 0x6e, 0x67, 0x61, 0x2e, 0x42, 0x61, 0x64, 0x67,
	0x65, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x26, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x22, 0xb6,
	0x02, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x33, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xde, 0x01, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4b, 0x61, 0x6e, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x4b, 0x61, 0x6e, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x59, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x59, 0x65, 0x6c, 0x6c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x59, 0x65, 0x6c,
	0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x59, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x50, 0x0a, 0x0f, 0x62, 0x6f, 0x6f, 0x6b,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6b, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x0f, 0x42, 0x6f,
	0x6f, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x22, 0xe0, 0x05,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a,
	0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46,
	0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46, 0x75, 0x7a, 0x2e,
	0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x05, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x43, 0x6f, 0x6d, 0x69, 0x63, 0x46,
	0x75, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x37,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x59, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f,
	0x52, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x49, 0x44,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x22, 0x37, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x03,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x3b, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ComicFuz_protoc_rawDescOnce sync.Once
	file_ComicFuz_protoc_rawDescData = file_ComicFuz_protoc_rawDesc
)

func file_ComicFuz_protoc_rawDescGZIP() []byte {
	file_ComicFuz_protoc_rawDescOnce.Do(func() {
		file_ComicFuz_protoc_rawDescData = protoimpl.X.CompressGZIP(file_ComicFuz_protoc_rawDescData)
	})
	return file_ComicFuz_protoc_rawDescData
}

var file_ComicFuz_protoc_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ComicFuz_protoc_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ComicFuz_protoc_goTypes = []interface{}{
	(DeviceInfo_DeviceType)(0),             // 0: ComicFuz.DeviceInfo.DeviceType
	(Manga_Badge)(0),                       // 1: ComicFuz.Manga.Badge
	(Chapter_Badge)(0),                     // 2: ComicFuz.Chapter.Badge
	(Chapter_PointConsumption_Type)(0),     // 3: ComicFuz.Chapter.PointConsumption.Type
	(*DeviceInfo)(nil),                     // 4: ComicFuz.DeviceInfo
	(*MangaDetailRequest)(nil),             // 5: ComicFuz.MangaDetailRequest
	(*MangaDetailResponse)(nil),            // 6: ComicFuz.MangaDetailResponse
	(*Manga)(nil),                          // 7: ComicFuz.Manga
	(*Authorship)(nil),                     // 8: ComicFuz.Authorship
	(*ChapterGroup)(nil),                   // 9: ComicFuz.ChapterGroup
	(*Chapter)(nil),                        // 10: ComicFuz.Chapter
	(*MangaDetailResponse_Tag)(nil),        // 11: ComicFuz.MangaDetailResponse.Tag
	(*MangaDetailResponse_Sns)(nil),        // 12: ComicFuz.MangaDetailResponse.Sns
	(*MangaDetailResponse_UserPoint)(nil),  // 13: ComicFuz.MangaDetailResponse.UserPoint
	(*MangaDetailResponse_ViewButton)(nil), // 14: ComicFuz.MangaDetailResponse.ViewButton
	(*Authorship_Author)(nil),              // 15: ComicFuz.Authorship.Author
	(*ChapterGroup_BookIssueHeader)(nil),   // 16: ComicFuz.ChapterGroup.BookIssueHeader
	(*Chapter_PointConsumption)(nil),       // 17: ComicFuz.Chapter.PointConsumption
}
var file_ComicFuz_protoc_depIdxs = []int32{
	0,  // 0: ComicFuz.DeviceInfo.deviceType:type_name -> ComicFuz.DeviceInfo.DeviceType
	4,  // 1: ComicFuz.MangaDetailRequest.deviceInfo:type_name -> ComicFuz.DeviceInfo
	13, // 2: ComicFuz.MangaDetailResponse.userPoint:type_name -> ComicFuz.MangaDetailResponse.UserPoint
	7,  // 3: ComicFuz.MangaDetailResponse.manga:type_name -> ComicFuz.Manga
	9,  // 4: ComicFuz.MangaDetailResponse.chapters:type_name -> ComicFuz.ChapterGroup
	8,  // 5: ComicFuz.MangaDetailResponse.authorship:type_name -> ComicFuz.Authorship
	11, // 6: ComicFuz.MangaDetailResponse.tags:type_name -> ComicFuz.MangaDetailResponse.Tag
	12, // 7: ComicFuz.MangaDetailResponse.sns:type_name -> ComicFuz.MangaDetailResponse.Sns
	14, // 8: ComicFuz.MangaDetailResponse.viewButton:type_name -> ComicFuz.MangaDetailResponse.ViewButton
	1,  // 9: ComicFuz.Manga.badge:type_name -> ComicFuz.Manga.Badge
	15, // 10: ComicFuz.Authorship.author:type_name -> ComicFuz.Authorship.Author
	16, // 11: ComicFuz.ChapterGroup.bookIssueHeader:type_name -> ComicFuz.ChapterGroup.BookIssueHeader
	10, // 12: ComicFuz.ChapterGroup.chapters:type_name -> ComicFuz.Chapter
	17, // 13: ComicFuz.Chapter.pointConsumption:type_name -> ComicFuz.Chapter.PointConsumption
	2,  // 14: ComicFuz.Chapter.badge:type_name -> ComicFuz.Chapter.Badge
	10, // 15: ComicFuz.MangaDetailResponse.ViewButton.chapter:type_name -> ComicFuz.Chapter
	3,  // 16: ComicFuz.Chapter.PointConsumption.type:type_name -> ComicFuz.Chapter.PointConsumption.Type
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_ComicFuz_protoc_init() }
func file_ComicFuz_protoc_init() {
	if File_ComicFuz_protoc != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ComicFuz_protoc_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manga); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailResponse_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailResponse_Sns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailResponse_UserPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MangaDetailResponse_ViewButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorship_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterGroup_BookIssueHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ComicFuz_protoc_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter_PointConsumption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ComicFuz_protoc_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ComicFuz_protoc_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ComicFuz_protoc_goTypes,
		DependencyIndexes: file_ComicFuz_protoc_depIdxs,
		EnumInfos:         file_ComicFuz_protoc_enumTypes,
		MessageInfos:      file_ComicFuz_protoc_msgTypes,
	}.Build()
	File_ComicFuz_protoc = out.File
	file_ComicFuz_protoc_rawDesc = nil
	file_ComicFuz_protoc_goTypes = nil
	file_ComicFuz_protoc_depIdxs = nil
}
